import java.util.Scanner;

public class TripPlanner {

	public static void main(String[] args) {

		/*
		 * 
		 * F-Cursor forward 
		 * B-Cursor backward 
		 * I-Insert before cursor Secondary
		 * menu asking for Location, Distance, Activity (in that order) 
		 * A-Append to tail Secondary menu asking for Location, Distance, Activity (in
		 * that order) 
		 * D-Delete and move cursor forward 
		 * H-Cursor to Head
		 * T-Cursor to Tail 
		 * E-Edit cursor Secondary menu asking for edits to Location, Distance, Activity (in that order, see sample) 
		 * S-Switch itinerary O-Insert cursor from other itinerary before cursor from this itinerary (via cloning)
		 *  R-Replace this itinerary with a copy of the other itinerary 
		 *  P-Print current itinerary, including summary (see sample)
		 *   C-Clear current itinerary Q-Quit
		 */
		String choice;
		Scanner sc = new Scanner(System.in);
		Scanner input = new Scanner(System.in);
		Itinerary Vacation1 = new Itinerary();// I dont like typing Itinerary
		Itinerary Vacation2 = new Itinerary();
		Itinerary CurrentVacation = Vacation1;
		String location = "", activity = "";
		int dist = 0;
		while (true)// infinite loop
		{
			System.out.println("Welcome to Zotto's TripPlanner!\n");// for formatting
			System.out.println("Select an option from the Menu:");
			System.out.println("F-Cursor forward");
			System.out.println("B-Cursor backward");
			System.out.println("I-Insert before cursor");
			System.out.println("A-Append to tail");
			System.out.println("D-Delete and move cursor forward");
			System.out.println("H-Cursor to Head");
			// System.out.println("T-Cursor to Tail");
			// System.out.println("E-edit cursor");
			// /System.out.println("S-Switch itinerary");
			// System.out.println("O-Inset cursor from other i");
			System.out.println("Q-Quit");
			System.out.print("Select an Operation: ");

			choice = sc.nextLine();

			switch (choice.toUpperCase()) {
			case "F":// need to implement error exceptions
			{
				try {
				CurrentVacation.cursorFoward();
				System.out.println("Cursor moved forward");
				}catch(EndOfItineraryException e)
				{
					System.out.println("Cursor is at end of list.");
				}
				//input.nextLine();
				break;
			}
			case "B":// need to implement error exceptions
			{
				try{
				CurrentVacation.cursorBackward();
				System.out.println("Cursor moved back");
				}catch(EndOfItineraryException e)
				{
					System.out.println("Cursor is already at begining of list.");
				}
				//input.nextLine();
				break;
			}
			case "I":
			{
				try{
				System.out.println("Enter Location: ");
				location = input.nextLine();
				System.out.println("Enter Activity: ");
				activity = input.nextLine();
				System.out.println("Enter Distance: ");
				dist= input.nextInt();
				System.out.println("Added.");
				input.nextLine();
				TripStop newStop = new TripStop(location,dist,activity);
				System.out.println("new stop = " + newStop);
				CurrentVacation.insetBeforeCursor(newStop);
				}catch(IllegalArgumentException e)
				{
					System.out.println("Distance is invalid -- enter value above or equal to 0");
					//input.nextLine();
				}
				
				//TripStopNode newNode = new TripStopNode(newStop);
				break;
				
			}
			case "D":
			{
				try {
				CurrentVacation.removeCursor();
				System.out.println("Deleted cursor.");
				CurrentVacation.cursorFoward();
				}catch (EndOfListException e)
				{
					System.out.println("End of list.");
				} catch (EndOfItineraryException e) {
					// TODO Auto-generated catch block
					System.out.println();
				}
				
				break;
			}
			case "A":
			{
				try{
				System.out.println("Enter Location: ");
				location = input.nextLine();
				System.out.println("Enter Activity: ");
				activity = input.nextLine();
				System.out.println("Enter Distance: ");
				dist= input.nextInt();
				System.out.println("Added.");
				input.nextLine();
				TripStop newStop = new TripStop(location,dist,activity);
				CurrentVacation.appendToTail(newStop);
				}catch(IllegalArgumentException e)
				{
					System.out.println("Value is invalid");
				}
				break;
			}
			case "P":
			{
				CurrentVacation.PrintAllStops();
				//Vacation2.PrintAllStops();
				break;
			}
			case "R":
			{
				if (CurrentVacation == Vacation1)
				{
					
					Vacation1 = (Itinerary) Vacation2.Clone();
				}
				else 
				{
					Vacation2 = (Itinerary) Vacation1.Clone();
				}
				System.out.println("Itinerary Copied.");
				
				break;
			}
			case "S":
			{
				if (CurrentVacation == Vacation1)
				{
					CurrentVacation = Vacation2;
				}
				else if (CurrentVacation == Vacation2)
					CurrentVacation = Vacation1;
				System.out.println("Itinerary Switched.");
				break;
				
				
			}
			case "C":
			{
				if (CurrentVacation == Vacation1)
				{
					Vacation1 = new Itinerary();
					CurrentVacation = Vacation1;
				}
				else 
				{
					Vacation2 = new Itinerary();
					CurrentVacation = Vacation2;
				}
				break;
				
			}
			case "E":// ask about get Cursor method
			{
				try{
					TripStopNode newCursor = CurrentVacation.getCursor();
					System.out.println("Edit Location, or press enter without typing anything to keep: " + newCursor.getData().getLocation());
					location = input.nextLine();
					System.out.println("Edit Distance, or press -1 without typing anything to keep: " + newCursor.getData().getDistance()); 
					dist = input.nextInt();
					input.nextLine();
					System.out.println("Edit Activity, or press enter without typing anything to keep: " + newCursor.getData().getActivity());
					activity = input.nextLine();
					if (!(location.equals("")))
					{
							newCursor.getData().setLocation(location);
					}
					if (!(dist == -1))
					{
						newCursor.getData().setDistace(dist);
					}
					if (!(activity.equals("")))
						{
							newCursor.getData().setActivity(activity);
						}
					System.out.println("Edits applied");
					}catch(IllegalArgumentException e)
					{
						System.out.println("List is empty");
					}
				
				break;
					
			}
			case "T":
			{
				System.out.println("Cursor moved to tail.");
				CurrentVacation.moveCursorToTail();
				break;
			}
			case "H":
			{
				System.out.println("Cursor moved to head.");
				CurrentVacation.resetCursorToHead();
				break;
			}
			case "Q":
			{
				System.out.println("Quitting.");
				System.exit(0);
				break;
			}
			default:
			{
				System.out.println("Option doesnt exist!");
				break;
			}
			}
		}
	}
}
